plugins {
    id 'java'
    id 'com.diffplug.spotless' version '7.0.3'
}

group = 'com.github.coding_paradigm'
version = '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(24))
        vendor.set(JvmVendorSpec.ORACLE)
    }
}

sourceSets {
    jmh
}

repositories {
    mavenCentral()
}

dependencies {
    jmhImplementation 'org.openjdk.jmh:jmh-core:1.37'
    jmhImplementation 'org.openjdk.jmh:jmh-generator-bytecode:1.37'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

spotless {
    java {
        googleJavaFormat()
    }
}

tasks.register('allBenchmarks') {
    group = 'verification'
    description = 'Runs all benchmarks'
}

fileTree('src/jmh/java/com/github/coding_paradigm/benchmarks').each { file ->
    def name = file.name.replace('.java', '')
    name = name.substring(name.indexOf('_') + 1, name.lastIndexOf('_'))
    def taskName = 'benchmark' + name
    tasks.register(taskName, JavaExec) {
        group = 'verification'
        dependsOn 'jmhClasses'
        description = "Runs benchmark ${name}"
        classpath = sourceSets.jmh.runtimeClasspath
        mainClass.set("com.github.coding_paradigm.runner.Primer")
        args name
    }
    tasks.named('allBenchmarks').configure {
        dependsOn taskName
    }
}
